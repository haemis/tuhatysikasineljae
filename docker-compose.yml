version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telegram-bot-db
    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d telegram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram Bot Application
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: telegram-business-card-bot
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: telegram_bot
      DB_USER: bot_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - bot_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('./dist/utils/healthCheck').default.checkHealth().then(() => process.exit(0)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: telegram-bot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bot
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  bot_logs:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: telegram-bot-network 